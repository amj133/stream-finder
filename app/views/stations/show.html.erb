<%= render partial: 'layouts/banner_1' %>
<%= render partial: 'layouts/navbar' %>

<div class="show-container">
  <div class="p2 bg-white rounded my2 mx-auto station-show-info">
    <div class="project-show-info">
        <h1>Station ID: <%= @station.org_id %></h1>
    </div>
    <div class="rounded station-show-stats">
      <h3>Watershed: <%= @station.huc %></h3>
      <i class="fas fa-chevron-circle-right"></i>&nbsp;&nbsp;Type: <%= @station.type_of %><br><br>
      <i class="fas fa-chevron-circle-right"></i>&nbsp;&nbsp;Name: <%= @station.name %><br><br>
      <% if @station.description %>
      <i class="fas fa-chevron-circle-right"></i>&nbsp;&nbsp;Description: <%= @station.description %><br><br>
      <% else %>
      <i class="fas fa-chevron-circle-right"></i>&nbsp;&nbsp;Description: None provided<br><br>
      <% end %>
      <i class="fas fa-chevron-circle-right"></i>&nbsp;&nbsp;Coordinates: <%= @station.latitude %>, <%= @station.longitude %><br><br>
      <i class="fas fa-chevron-circle-right"></i>&nbsp;&nbsp;Drainage Area: <%= @station.drainage_area %> <%= @station.drainage_area_units %>.
    </div>
  </div>
</div>

<div class="stream-discharge-section">
  <div class="p2 bg-white rounded my2 mx-auto streamflow-container">
    <div class="chart-title">
      Stream Discharge(cfs) in Past 24 Hours
    </div>
    <canvas id="myChart" width="1600" height="900"></canvas>
  </div>

  <div class="p2 bg-white rounded my2 mx-auto historical-discharge-search">
    <h3>Enter dates to search for historic streamflow</h3>
    <div class="search-container">
      <div class='filter-ctrl'>
        <input class='filter-input' type='text' name='filter' placeholder='Start Date' />
      </div>
      <div class='filter-options'>&nbsp;&nbsp;&nbsp;(YYYY-MM-DD)</div>
    </div>
    <div class="search-container">
      <div class='filter-ctrl'>
        <input class='filter-input' type='text' name='filter' placeholder='End Date' />
      </div>
      <div class='filter-options'>&nbsp;&nbsp;&nbsp;(YYYY-MM-DD)</div>
    </div>
    <div class="get-historic-container">
      <button onclick="getHistoricalStreamflow()" class="view-historical">View Historical Streamflow</button>
    </div>
    <div class="get-historic-container">
      <button onclick="emailStreamflow()" class="view-historical">Email Streamflow Data&nbsp;&nbsp;&nbsp;<i class="fas fa-envelope"></i></button>
    </div>
  </div>
</div>


<script>
var station_id = `${5<%= @station.org_id.split("-")[1] %>}`;

let ctx = document.getElementById("myChart");
let streamChart = new Chart(ctx, {
  type: 'bar',
  data: {
    labels: [],
    datasets: [
      {
        data: [],
        label: "Discharge",
        borderColor: "#3e95cd",
        fill: false,
        backgroundColor: 'rgb(106, 157, 164)',
        borderColor: 'rgb(9, 23, 74)',
      }
    ]
  },
  options : {
    scales: {
      yAxes: [{
        scaleLabel: {
          display: true,
          labelString: 'Discharge (cfs)'
        }
      }],
      xAxes: [{
        bounds: 'ticks',
        type: 'time',
        time: {
               displayFormats: {
                 hour: 'MMM D, h:mm a'
             }
        },
        distribution: 'linear',
        scaleLabel: {
          display: true,
          labelString: 'Time',
          unit: 'hour'
        }
      }],
    }
 }
});

function removeData(chart) {
  chart.data.labels = [];
  chart.data.datasets[0].data = []
  chart.update();
}

function addData(chart, label, data) {
  chart.data.labels = label;
  chart.data.datasets[0].data = data
  chart.update();
}

const updateStreamChart = (time, streamflow) => {
  removeData(streamChart)
  addData(streamChart, time, streamflow.discharge)
  streamChart.options.scales.yAxes[0].scaleLabel.min = Math.min(...streamflow.discharge) - 1;
  streamChart.options.scales.yAxes[0].scaleLabel.max = Math.max(...streamflow.discharge) + 1;
  streamChart.options.scales.xAxes[0].scaleLabel.min = Math.min(...time);
  streamChart.options.scales.xAxes[0].scaleLabel.max = Math.max(...time);
  streamChart.update()
}

const convertStringToDatetime = (time) => {
  return new Date(time.split(" ")[0],
                  time.split(" ")[1] - 1,
                  time.split(" ")[2],
                  time.split(" ")[3],
                  time.split(" ")[4])
}

$(document).ready(function(){
  fetch(`/api/v1/recent_streamflow?station_id=${station_id.substr(0-8)}`)
    .then((response) => response.json())
    .then((streamflow) => {
      var time = streamflow.time.map(function(time) {
        return convertStringToDatetime(time)
      }).sort();
      updateStreamChart(time, streamflow)
      if (streamChart.data.datasets[0].data.length == 0) {
        $('#myChart').hide()
        $('.chart-title')[0].innerHTML = '<p> Twenty-four hour stream discharge data not available </p>'
      }
    })
})

const getStartDate = (dateInput) => {
  return dateInput[0].value
}

const getEndDate = (dateInput) => {
  return dateInput[1].value
}

const getStationName = () => {
  return window.location.pathname.split("/")[2].split("-")[1]
}

const changeChartTitle = (startDate, endDate) => {
  if (streamChart.data.datasets[0].data.length == 0) {
    $('.chart-title')[0].innerHTML = `<p> Stream Discharge(cfs) from ${startDate} to ${endDate} is not available </p>`
  } else {
    $('.chart-title')[0].innerHTML = `Stream Discharge(cfs) from ${startDate} to ${endDate}`
  }
}

const getHistoricalStreamflow = () => {
  let dates = $('.filter-input')
  let startDate = getStartDate(dates)
  let endDate = getEndDate(dates)
  let stationId = getStationName()
  let params = `?startDate=${startDate}&endDate=${endDate}`
  fetch(`/api/v1/date_range_streamflow/${stationId}` + params)
    .then((response) => response.json())
    .then((streamflow) => {
      var time = streamflow.time.map(function(time) {
        return convertStringToDatetime(time)
      }).sort();
      updateStreamChart(time, streamflow)
      changeChartTitle(startDate, endDate)
    })
}

const emailStreamflow = () => {
  let dates = $('.filter-input')
  let startDate = getStartDate(dates)
  let endDate = getEndDate(dates)
  let stationId = getStationName()
  let params = `?startDate=${startDate}&endDate=${endDate}`
  fetch(`/api/v1/email_streamflow/${stationId}` + params, {credentials: "same-origin"})
    .then((response) => response.json())
}

</script>
